# Nginx Configuration for UDRG Membership System
# Alternative to Apache for VPS deployment

# ========================================
# Main Server Configuration
# Place this in /etc/nginx/sites-available/udrg-app
# ========================================

# Rate limiting
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

# Upstream definition
upstream udrg_app {
    server localhost:3000;
    keepalive 32;
}

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com www.your-domain.com;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com www.your-domain.com;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/your-domain.com.crt;
    ssl_certificate_key /etc/ssl/private/your-domain.com.key;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' fonts.googleapis.com; font-src 'self' fonts.gstatic.com; img-src 'self' data: blob:; connect-src 'self';" always;
    
    # Logging
    access_log /var/log/nginx/udrg-access.log;
    error_log /var/log/nginx/udrg-error.log;
    
    # General Settings
    client_max_body_size 20M;
    keepalive_timeout 65;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Static file serving for uploads
    location /uploads/ {
        alias /home/username/public_html/app/uploads/;
        expires 30d;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
        
        # Security: prevent execution of scripts in uploads
        location ~* \.(php|phtml|php3|php4|php5|pl|py|jsp|asp|sh|cgi)$ {
            deny all;
        }
        
        # Optimize image delivery
        location ~* \.(jpg|jpeg|png|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Handle missing files
        try_files $uri =404;
    }
    
    # API endpoints with rate limiting
    location /api/auth/login {
        limit_req zone=login burst=3 nodelay;
        proxy_pass http://udrg_app;
        include /etc/nginx/proxy_params.conf;
    }
    
    location /api/ {
        limit_req zone=api burst=10 nodelay;
        proxy_pass http://udrg_app;
        include /etc/nginx/proxy_params.conf;
    }
    
    # WebSocket support (if needed)
    location /ws {
        proxy_pass http://udrg_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400;
    }
    
    # Main application
    location / {
        # Check for static files first
        try_files $uri @proxy;
    }
    
    # Proxy to Node.js application
    location @proxy {
        proxy_pass http://udrg_app;
        include /etc/nginx/proxy_params.conf;
    }
    
    # Health check endpoint (no rate limiting)
    location /api/health {
        proxy_pass http://udrg_app;
        access_log off;
        include /etc/nginx/proxy_params.conf;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /uploads/\n";
    }
    
    # Favicon
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|log|config|ini|sql|bak|backup)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Deny access to node_modules
    location ~ /node_modules/ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# ========================================
# Proxy Parameters Configuration
# Create this file as /etc/nginx/proxy_params.conf
# ========================================

proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-NginX-Proxy true;

proxy_redirect off;
proxy_http_version 1.1;
proxy_set_header Connection "";

# Timeouts
proxy_connect_timeout 60s;
proxy_send_timeout 60s;
proxy_read_timeout 60s;

# Buffering
proxy_buffering on;
proxy_buffer_size 8k;
proxy_buffers 8 8k;
proxy_busy_buffers_size 16k;

# ========================================
# Optional: Development/Staging Server
# ========================================

server {
    listen 80;
    server_name dev.your-domain.com staging.your-domain.com;
    
    # Basic auth for staging
    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    location / {
        proxy_pass http://localhost:3001;  # Different port for staging
        include /etc/nginx/proxy_params.conf;
    }
}

# ========================================
# SSL Configuration for Let's Encrypt
# ========================================

# If using Let's Encrypt, replace the SSL section with:
# ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
# ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;

# Let's Encrypt challenge location
# location /.well-known/acme-challenge/ {
#     root /var/www/certbot;
# }

# ========================================
# Installation Instructions
# ========================================

# 1. Install Nginx:
#    sudo apt install nginx -y  # Ubuntu/Debian
#    sudo yum install nginx -y  # CentOS/RHEL

# 2. Create the configuration:
#    sudo nano /etc/nginx/sites-available/udrg-app

# 3. Create proxy_params.conf:
#    sudo nano /etc/nginx/proxy_params.conf

# 4. Enable the site:
#    sudo ln -s /etc/nginx/sites-available/udrg-app /etc/nginx/sites-enabled/

# 5. Test configuration:
#    sudo nginx -t

# 6. Restart Nginx:
#    sudo systemctl restart nginx

# 7. Enable autostart:
#    sudo systemctl enable nginx

# ========================================
# SSL Certificate Setup (Let's Encrypt)
# ========================================

# 1. Install Certbot:
#    sudo apt install certbot python3-certbot-nginx -y

# 2. Get certificate:
#    sudo certbot --nginx -d your-domain.com -d www.your-domain.com

# 3. Auto-renewal:
#    sudo crontab -e
#    Add: 0 12 * * * /usr/bin/certbot renew --quiet

# ========================================
# Monitoring and Logs
# ========================================

# Check access logs:
# sudo tail -f /var/log/nginx/udrg-access.log

# Check error logs:
# sudo tail -f /var/log/nginx/udrg-error.log

# Check Nginx status:
# sudo systemctl status nginx

# Reload configuration:
# sudo nginx -s reload

# ========================================
# Performance Tuning
# ========================================

# Add to /etc/nginx/nginx.conf in http block:
# worker_processes auto;
# worker_connections 1024;
# sendfile on;
# tcp_nopush on;
# tcp_nodelay on;
# keepalive_timeout 65;
# types_hash_max_size 2048;
# client_max_body_size 20M;

# ========================================
# Security Enhancements
# ========================================

# 1. Fail2ban for DDoS protection:
#    sudo apt install fail2ban
#    sudo systemctl enable fail2ban

# 2. Firewall rules:
#    sudo ufw allow 22/tcp
#    sudo ufw allow 80/tcp
#    sudo ufw allow 443/tcp
#    sudo ufw enable

# 3. Regular security updates:
#    sudo apt update && sudo apt upgrade -y