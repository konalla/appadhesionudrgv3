# Ultra-Optimized Production Dockerfile for UDRG Membership Management System
# This Dockerfile is specifically designed to reduce image size below 1GB

# Build stage with minimal Alpine base
FROM node:20-alpine AS builder

# Install only absolutely essential build dependencies
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    libjpeg-turbo-dev \
    freetype-dev

# Set working directory
WORKDIR /app

# Copy package files first for optimal Docker layer caching
COPY package*.json ./

# Install dependencies with aggressive optimizations
RUN npm ci --include=dev --frozen-lockfile --no-audit --no-fund && \
    npm cache clean --force

# Copy ONLY essential source files (using production dockerignore)
COPY client ./client
COPY server ./server
COPY shared ./shared
COPY vite.config.ts tsconfig.json tailwind.config.ts postcss.config.js theme.json ./

# Build with maximum optimizations
RUN NODE_ENV=production npm run build && \
    # Immediately clean up all build dependencies and cache
    npm prune --production && \
    apk del .build-deps && \
    rm -rf ~/.npm /tmp/* /var/tmp/* /var/cache/apk/* && \
    rm -rf node_modules/.cache && \
    # Remove all development files from node_modules
    find node_modules -name "*.md" -delete && \
    find node_modules -name "*.txt" -delete && \
    find node_modules -name "LICENSE*" -delete && \
    find node_modules -name "CHANGELOG*" -delete && \
    find node_modules -name "example*" -delete && \
    find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "*.test.js" -delete && \
    find node_modules -name "*.spec.js" -delete && \
    find node_modules -name "*.map" -delete

# Ultra-lightweight production stage
FROM node:20-alpine AS production

# Production environment variables
ENV NODE_ENV=production
ENV PORT=5000
ENV NPM_CONFIG_LOGLEVEL=error

WORKDIR /app

# Install only critical runtime dependencies
RUN apk add --no-cache \
    cairo \
    jpeg \
    pango \
    giflib \
    pixman \
    libjpeg-turbo \
    freetype \
    curl \
    dumb-init && \
    rm -rf /var/cache/apk/*

# Create minimal non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S appuser -u 1001 -G nodejs

# Copy only production package.json
COPY package.json ./

# Install ONLY production dependencies with maximum optimization
RUN npm ci --only=production --frozen-lockfile --no-audit --no-fund --no-optional && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/tmp/* && \
    # Aggressively clean node_modules
    find node_modules -name "*.md" -delete && \
    find node_modules -name "*.txt" -delete && \
    find node_modules -name "LICENSE*" -delete && \
    find node_modules -name "CHANGELOG*" -delete && \
    find node_modules -name "README*" -delete && \
    find node_modules -name "example*" -delete && \
    find node_modules -name "demo*" -delete && \
    find node_modules -name "test" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "__tests__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "*.test.js" -delete && \
    find node_modules -name "*.spec.js" -delete && \
    find node_modules -name "*.map" -delete && \
    find node_modules -name "*.ts" -delete && \
    find node_modules -name "*.d.ts" -delete && \
    find node_modules -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find node_modules -name "documentation" -type d -exec rm -rf {} + 2>/dev/null || true

# Copy optimized build from builder
COPY --from=builder --chown=appuser:nodejs /app/dist ./dist

# Create minimal required directories
RUN mkdir -p uploads logs && \
    chown -R appuser:nodejs uploads logs dist

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Minimal health check
HEALTHCHECK --interval=60s --timeout=5s --start-period=30s --retries=2 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Start with proper signal handling
CMD ["dumb-init", "node", "dist/index.js"]